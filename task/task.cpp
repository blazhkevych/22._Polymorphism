/*
############################################ ЗАДАНИЕ ###########################################
				Список носителей информации
		Разработать программу, которая формирует список
	носителей информации, таких как, USB-флеш-накопитель,
	портативный жесткий диск, DVD–диск. Каждый носитель
	информации является объектом соответствующего класса:
		* класс «USB-флеш-накопитель»;
		* класс «Портативный жесткий диск»;
		* класс «DVD–диск».
		Все три класса являются производными от абстрактного
	базового класса «Носитель информации».
		В базовом классе хранится имя производителя, модель,
	наименование, ёмкость носителя, количество. Класс обладает
	всеми необходимыми методами-аксессорами, а также
	методами печати, загрузки и сохранения. В производных
	классах переопределяются методы печати, загрузки и
	сохранения. Кроме того, каждый из производных классов
	дополняется следующими полями:
		* класс «USB-флеш-накопитель»: скорость USB;
		* класс «Портативный жесткий диск»: скорость вращения
	шпинделя;
		* класс «DVD–диск»: скорость записи.
		Работа с объектами соответствующих классов
	производится через указатели на базовый класс, которые
	хранятся в динамическом массиве.
		Программа должна предоставлять возможность
	добавления, удаления (по номеру), печати, изменения (по
	номеру) определённых параметров носителя, поиска по
	заданному критерию, а также возможность загрузки данных из
	файла и сохранения данных в файл.
		Поле «Наименование носителя» следует применять для
	идентификации носителя информации только при загрузке
	данных из файла. В остальных случаях для идентификации
	носителя информации необходимо применять механизм RTTI
	(динамическая идентификация типа) либо полиморфное
	приведение типов с использованием оператора dynamic_cast.
################################################################################################
задание похоже на 21-е
02,36,46
*/

#include "MediaList.h"

#include <Windows.h>
#include <iostream>
#include <conio.h>

using std::cout;
using std::cin;
using std::endl;

int main()
{
	SetConsoleCP(1251);
	/*
	Задает кодовую страницу ввода, используемую консолью, связанной с вызывающим процессом.
	Консоль использует страницу входного кода для преобразования ввода с клавиатуры
	в соответствующее символьное значение.
	*/
	SetConsoleOutputCP(1251);
	/*
	Задает выходную кодовую страницу, используемую консолью, связанной с вызывающим процессом.
	Консоль использует свою кодовую страницу вывода для преобразования символьных значений,
	записанных различными функциями вывода, в изображения, отображаемые в окне консоли.
	*/

	srand(time(0));

	MediaList list{};	// Создание массива.

	// TODO: место для загрузки из файла.

	while (true)
	{
		system("cls");
		cout << "\tГлавное меню." << endl
			<< "\n1. Добавить носитель."
			<< "\n2. Удалить носитель."
			<< "\n3. Печать носителей."
			<< "\n4. Изменить носитель."
			<< "\n5. Поиск носителя."
			<< "\n6. Выход" << endl;
		int choice_mainMenu{};
		int number{};
		cout << "\n >>> : ";
		cin >> choice_mainMenu;
		switch (choice_mainMenu)
		{
		case 1:														// 1. Добавить носитель. // OK
			system("cls");
			cout << "Главное меню."
				"\n\t1. Добавить носитель."
				<< endl;
			list.AddDevice();
			cout << "\nГотово !" << endl
				<< "\nДля продолжения нажмите любую клавишу." << endl;
			_getch();
			break;
		case 2:														// 2. Удалить носитель. // OK
			system("cls");
			cout << "Главное меню."
				"\n\t2. Удалить носитель."
				<< endl;
			if (list.get_size() > 0)
			{
				list.Delete(number);
				cout << "\nГотово !" << endl
					<< "\nДля продолжения нажмите любую клавишу." << endl;
				_getch();
			}
			else
				cout << endl << "Список пуст !" << endl
				<< "\nДля продолжения нажмите любую клавишу." << endl;
			_getch();
			break;
		case 3:														// 3. Печать носителей. // OK TODO: Дописать печать по видам носителей
			system("cls");
			cout << "Главное меню."
				"\n\t3. Печать носителей."
				<< endl;
			if (list.get_size() > 0)
			{
				list.PrintAll();
				cout << "\nГотово !" << endl
					<< "\nДля продолжения нажмите любую клавишу." << endl;
				_getch();
			}
			else
				cout << endl << "Список пуст !" << endl
				<< "\nДля продолжения нажмите любую клавишу." << endl;
			_getch();
			break;
		case 4: // 4. Изменить носитель.
			system("cls");
			cout << "Главное меню."
				"\n\t4. Изменить носитель."
				<< endl;
			if (list.get_size() > 0)
			{
				list.PrintAll();
				cout << "\nВведите номер элемента в списке: ";
				cin >> number;
				list.Change(number);
				cout << "\nГотово !" << endl
					<< "\nДля продолжения нажмите любую клавишу." << endl;
				_getch();
			}
			else
				cout << endl << "Список пуст !" << endl
				<< "\nДля продолжения нажмите любую клавишу." << endl;
			_getch();
			break;
		case 5: // 5. Поиск носителя.
			system("cls");
			cout << "Главное меню."
				"\n\t5. Поиск носителя."
				<< endl;
			if (list.get_size() > 0)
			{
				list.Search();
				cout << "\nГотово !" << endl
					<< "\nДля продолжения нажмите любую клавишу." << endl;
				_getch();
			}
			else
				cout << endl << "Список пуст !" << endl
				<< "\nДля продолжения нажмите любую клавишу." << endl;
			_getch();
			break;
		case 6:
			// TODO: место для сохранения в файл. // 6. Выход
			return 0;
		default:
			cout << "Ошибка !" << endl;
			break;
		}
	}

}